{ 0 <= n }
r := 0;
x := 0;
do[false] // TODO: replace `false` by a suitable invariant for the outer loop
  x < n ->
    y := 0;
    do[false] // TODO: replace `false` by a suitable invariant for the inner loop
      y < n -> 
        r := r + 1;
        y := y + 1
    od;
    { y = n } // add your inner loop invariant here
    x := x + 1 
od
{ r = n * n }

// Inner loop is correct when:
{ 0 <= n }
y := 0;
r := x; // This represents how far the outer loop is
do[y <= n & r = x + y]
  y < n -> 
    r := r + 1;
    y := y + 1
od
{ y = n }

// This is how for I have gotten so far
{ 0 <= n }
r := 0;
x := 0;
do[x <= n & r = n * x] 
  x < n ->
    y := 0;
    do[y <= n & r = n * x + y]
      y < n -> 
        r := r + 1;
        y := y + 1
    od;
    { y = n & y <= n & r = n * x + y } // add your inner loop invariant here
    x := x + 1 
od
{ r = n * n }

{ 0 <= n }
{0 <= n & 0 + (n-0) * n  =  n * n & 0 <= n}
r := 0;
{0 <= n & r + (n-0) * n  =  n * n & 0 <= n}
x := 0;
{x <= n & r + (n-x) * n  =  n * n & 0 <= n}
do[x <= n & r + (n-x) * n  =  n * n & 0 <= n] 
  x < n -> {x <= n & r + (n-x) * n  =  n * n & 0 <= n & x < n}
    {0 <= n & r = 0 + x*n & 0 <= n & x < n}
    y := 0;
    {y <= n & r = y + x*n & 0 <= n & x < n}
    do[y <= n & r = y + x*n & 0 <= n & x < n] 
      y < n -> {y <= n & r = y + x*n & 0 <= n & x < n & y < n}
        {y+1 <= n & r+1 = y+1 + x*n & 0 <= n & x < n}
        r := r + 1;
        {y+1 <= n & r = y+1 + x*n & 0 <= n & x < n}
        y := y + 1
        {y <= n & r = y + x*n & 0 <= n & x < n}
    od;
    {y <= n & r = y + x*n & 0 <= n & !(y < n) & x < n }
    
    {x+1 <= n & r + (n-(x+1)) * n  =  n * n & 0 <= n} 
    x := x + 1 
    {x <= n & r + (n-x) * n  =  n * n & 0 <= n}
od
{x <= n & r + (n-x) * n  =  n * n & 0 <= n & !(x < n)}
{ r = n * n }
