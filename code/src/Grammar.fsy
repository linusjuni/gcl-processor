// Open the file that defines the type "expr" we shall use as AST
%{
open AST
%}

// Declare the tokens (terminal symbols)
%token <int> NUM
%token <string> VAR
%token TIMES DIV PLUS MINUS POW LPAR RPAR LSPAR RSPAR EOF
%token SKIP PROGRAM ASSIGNMENT IF FI DO OD
%token TRUE FALSE AND OR NOT SHORTAND
%token IMPLIES

// NOTE: the actual formats of these tokens are defined in the lexer file
//       as regular expressions

// Specify precedence and associativity of operators
// Precedence is given by the order (from low to high)
%left TIMES DIV
%left PLUS MINUS
%left NOT
%left AND OR

%right POW PROGRAM

// We declare the initial non-terminal symbol
%start start_expression
%start start_command 

// We specify the return type of each of then non-terminal symbols
%type <AST.expr> start_expression
%type <AST.expr> expression
%type <AST.command> start_command
%type <AST.command> command
%type <AST.gcommand> gcommand

// Grammar productions
%%

// The first production in "formal" notation is
// start_expression -> expression
// here written:
start_expression: expression EOF             { $1 }
start_command: command EOF                   { $1 } 

// Note that we need to insert an End-Of-File (EOF)
// The code annotation { $1 } specifies that parsing with this production
// returns whatever parsing the expression returns: $1 is the result of parsing
// the first component of the production (i.e. expression)

// The productions for expressions are like in the grammar we saw in class
// written in the yacc format:
expression:
  | expression TIMES expression   { TimesExpr($1,$3) }
  | expression DIV expression     { DivExpr($1,$3) }
  | expression PLUS expression    { PlusExpr($1,$3) }
  | expression MINUS expression   { MinusExpr($1,$3) }
  | expression POW expression     { PowExpr($1,$3) }
  | MINUS expression              { UMinusExpr($2) }
  | NUM                           { Num($1) }
  | VAR                           { Var($1) }
  | VAR LSPAR expression RSPAR    { ListElement($1, $3) }
  | LPAR expression RPAR          { $2 }

// Again, the code annotation specifies the result of parsing
// For example { TimesExpr($1,$3) } specifies that parsing with the production
// returns the value TimesExpr($1,$3), where $i is the result of parsing
// component i in the production (in this case the lhs and rhs operands)
boolean:
  | TRUE                          { True }
  | FALSE                         { False }
  | boolean AND boolean           { And($1,$3) }
  | boolean OR boolean            { Or($1,$3) }
  | NOT boolean                   { Not($2)}
  | LPAR boolean RPAR             { $2 }
  | boolean SHORTAND boolean      { SHORTAND($1,$3) }

command:

  | SKIP                                                 { Skip }
  | command PROGRAM command                              { Program($1,$3) } 
  | VAR ASSIGNMENT expression                            { Assignment($1,$3) }
  | VAR LSPAR expression RSPAR ASSIGNMENT expression     { ListAssignment($1, $3, $6) }

  | SKIP                           { Skip }
  | command PROGRAM command        { Program($1,$3) } 
  | IF gcommand FI                 { If($2) }
  | DO gcommand OD                 { Do($2) }

gcommand:
  | boolean IMPLIES command        { Implies($1,$3) }

%%
